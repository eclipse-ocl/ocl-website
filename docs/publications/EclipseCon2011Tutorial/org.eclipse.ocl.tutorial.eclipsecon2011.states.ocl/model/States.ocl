import 'http://ocl.eclipse.org/tutorial/eclipsecon2011/States'

package states

context Statemachine
def: asError(verdict : Boolean) : Boolean =
    if verdict then true else null endif
inv HasInitialState('No initial state'):
    asError(states->exists(s : State | s.initial))

context SimpleState
inv NameLength('\'' + name + '\' has ' + name.size().toString()
                + ' characters when at least 4 wanted'):
    name.size() >= 4
    
inv NameIsLeadingUpperCase('\'' + name + '\' must be Leading Uppercase'):
    let firstLetter : String = name.substring(1,1)
    in firstLetter.toUpperCase() = firstLetter

def: statemachine : Statemachine = 
    oclContainer()->oclAsType(Statemachine)

inv UniqueInitialState('There is more than one initial state'):
    initial implies statemachine.states->select(initial)->size() = 1 

inv EveryEventIsHandled(
        let allEvents : Set(Event) = statemachine.events->asSet(),
            myEvents : Set(Event) = self.transitions.event->asSet()
        in (allEvents - myEvents)->iterate(e : Event;
            s : String = 'The following events are not handled:'
            | s + ' ' + e.name)):
    let allEvents : Set(Event) = statemachine.events->asSet(),
        myEvents : Set(Event) = self.transitions.event->asSet()
    in (allEvents - myEvents)->isEmpty()

endpackage